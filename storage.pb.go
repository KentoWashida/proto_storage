// Code generated by protoc-gen-go. DO NOT EDIT.
// source: storage.proto

package proto_storage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StorageType int32

const (
	StorageType_TYPE_ANY      StorageType = 0
	StorageType_TYPE_FILE     StorageType = 1
	StorageType_TYPE_DATABASE StorageType = 2
	StorageType_TYPE_KVSTORE  StorageType = 3
)

var StorageType_name = map[int32]string{
	0: "TYPE_ANY",
	1: "TYPE_FILE",
	2: "TYPE_DATABASE",
	3: "TYPE_KVSTORE",
}

var StorageType_value = map[string]int32{
	"TYPE_ANY":      0,
	"TYPE_FILE":     1,
	"TYPE_DATABASE": 2,
	"TYPE_KVSTORE":  3,
}

func (x StorageType) String() string {
	return proto.EnumName(StorageType_name, int32(x))
}

func (StorageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{0}
}

type DataType int32

const (
	DataType_DATA_ANY         DataType = 0
	DataType_DATA_LINE_APPEND DataType = 1
	DataType_DATA_FILE        DataType = 2
)

var DataType_name = map[int32]string{
	0: "DATA_ANY",
	1: "DATA_LINE_APPEND",
	2: "DATA_FILE",
}

var DataType_value = map[string]int32{
	"DATA_ANY":         0,
	"DATA_LINE_APPEND": 1,
	"DATA_FILE":        2,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{1}
}

// Demand/Supply message
type Storage struct {
	Tag                  string      `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Stype                StorageType `protobuf:"varint,2,opt,name=stype,proto3,enum=proto.storage.StorageType" json:"stype,omitempty"`
	Dtype                DataType    `protobuf:"varint,3,opt,name=dtype,proto3,enum=proto.storage.DataType" json:"dtype,omitempty"`
	Datasize             uint32      `protobuf:"varint,4,opt,name=datasize,proto3" json:"datasize,omitempty"`
	StorageSize          uint64      `protobuf:"varint,5,opt,name=storageSize,proto3" json:"storageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Storage) Reset()         { *m = Storage{} }
func (m *Storage) String() string { return proto.CompactTextString(m) }
func (*Storage) ProtoMessage()    {}
func (*Storage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{0}
}

func (m *Storage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Storage.Unmarshal(m, b)
}
func (m *Storage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Storage.Marshal(b, m, deterministic)
}
func (m *Storage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Storage.Merge(m, src)
}
func (m *Storage) XXX_Size() int {
	return xxx_messageInfo_Storage.Size(m)
}
func (m *Storage) XXX_DiscardUnknown() {
	xxx_messageInfo_Storage.DiscardUnknown(m)
}

var xxx_messageInfo_Storage proto.InternalMessageInfo

func (m *Storage) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Storage) GetStype() StorageType {
	if m != nil {
		return m.Stype
	}
	return StorageType_TYPE_ANY
}

func (m *Storage) GetDtype() DataType {
	if m != nil {
		return m.Dtype
	}
	return DataType_DATA_ANY
}

func (m *Storage) GetDatasize() uint32 {
	if m != nil {
		return m.Datasize
	}
	return 0
}

func (m *Storage) GetStorageSize() uint64 {
	if m != nil {
		return m.StorageSize
	}
	return 0
}

// Data Store message
type Record struct {
	Key                  string               `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Record               []byte               `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{1}
}

func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Record) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Record) GetRecord() []byte {
	if m != nil {
		return m.Record
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.storage.StorageType", StorageType_name, StorageType_value)
	proto.RegisterEnum("proto.storage.DataType", DataType_name, DataType_value)
	proto.RegisterType((*Storage)(nil), "proto.storage.Storage")
	proto.RegisterType((*Record)(nil), "proto.storage.Record")
}

func init() { proto.RegisterFile("storage.proto", fileDescriptor_0d2c4ccf1453ffdb) }

var fileDescriptor_0d2c4ccf1453ffdb = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0x4f, 0x6b, 0xea, 0x40,
	0x1c, 0x7c, 0xeb, 0xbf, 0xa7, 0x3f, 0xcd, 0x63, 0xdf, 0xf2, 0x78, 0x95, 0x5c, 0x1a, 0x3c, 0x05,
	0xa1, 0x6b, 0xb1, 0xe7, 0x1e, 0x22, 0xa6, 0x20, 0x15, 0x95, 0x4d, 0x28, 0xd8, 0x8b, 0x24, 0xba,
	0x4d, 0xc5, 0xda, 0x84, 0x64, 0x85, 0xa6, 0x1f, 0xad, 0x9f, 0xae, 0xec, 0x2f, 0x49, 0xb1, 0x3d,
	0x25, 0x33, 0x99, 0x99, 0x9d, 0x9d, 0x80, 0x91, 0xa9, 0x38, 0x0d, 0x22, 0xc9, 0x93, 0x34, 0x56,
	0x31, 0x33, 0xf0, 0xc1, 0x4b, 0xd2, 0xbc, 0x8c, 0xe2, 0x38, 0x7a, 0x91, 0x23, 0x64, 0xc3, 0xd3,
	0xd3, 0x48, 0xed, 0x8f, 0x32, 0x53, 0xc1, 0x31, 0x29, 0xf4, 0x83, 0x0f, 0x02, 0xbf, 0xbd, 0x42,
	0xcc, 0x28, 0xd4, 0x55, 0x10, 0xf5, 0x89, 0x45, 0xec, 0x8e, 0xd0, 0xaf, 0xec, 0x1a, 0x9a, 0x99,
	0xca, 0x13, 0xd9, 0xaf, 0x59, 0xc4, 0xfe, 0x33, 0x36, 0xf9, 0xb7, 0x74, 0x5e, 0x1a, 0xfd, 0x3c,
	0x91, 0xa2, 0x10, 0xb2, 0x2b, 0x68, 0xee, 0xd0, 0x51, 0x47, 0xc7, 0xc5, 0x0f, 0xc7, 0x34, 0x50,
	0x41, 0x21, 0x47, 0x15, 0x33, 0xa1, 0xbd, 0x0b, 0x54, 0x90, 0xed, 0xdf, 0x65, 0xbf, 0x61, 0x11,
	0xdb, 0x10, 0x5f, 0x98, 0x59, 0xd0, 0x2d, 0x6d, 0x9e, 0xfe, 0xdc, 0xb4, 0x88, 0xdd, 0x10, 0xe7,
	0xd4, 0x20, 0x84, 0x96, 0x90, 0xdb, 0x38, 0xdd, 0xe9, 0xea, 0x07, 0x99, 0x57, 0xd5, 0x0f, 0x32,
	0x67, 0x1c, 0x1a, 0xfa, 0xae, 0xd8, 0xbc, 0x3b, 0x36, 0x79, 0x31, 0x04, 0xaf, 0x86, 0xe0, 0x7e,
	0x35, 0x84, 0x40, 0x1d, 0xfb, 0x0f, 0xad, 0x14, 0xb3, 0xb0, 0x79, 0x4f, 0x94, 0x68, 0xb8, 0x84,
	0xee, 0xd9, 0x35, 0x59, 0x0f, 0xda, 0xfe, 0x7a, 0xe5, 0x6e, 0x9c, 0xc5, 0x9a, 0xfe, 0x62, 0x06,
	0x74, 0x10, 0xdd, 0xcd, 0xe6, 0x2e, 0x25, 0xec, 0x2f, 0x18, 0x08, 0xa7, 0x8e, 0xef, 0x4c, 0x1c,
	0xcf, 0xa5, 0x35, 0x46, 0xa1, 0x87, 0xd4, 0xfd, 0x83, 0xe7, 0x2f, 0x85, 0x4b, 0xeb, 0xc3, 0x5b,
	0x68, 0x57, 0x2b, 0xe8, 0x34, 0xad, 0x2d, 0xd3, 0xfe, 0x01, 0x45, 0x34, 0x9f, 0x2d, 0xdc, 0x8d,
	0xb3, 0x5a, 0xb9, 0x8b, 0x29, 0x25, 0xfa, 0x0c, 0x64, 0xf1, 0x8c, 0xda, 0x64, 0xf0, 0x68, 0x45,
	0x7b, 0xf5, 0x7c, 0x0a, 0xf9, 0x36, 0x3e, 0x8e, 0xb2, 0xfc, 0x55, 0xa6, 0xf2, 0xad, 0xf8, 0xbf,
	0x9b, 0x72, 0x9b, 0xb0, 0x85, 0xf0, 0xe6, 0x33, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x25, 0x1f, 0xe6,
	0x1c, 0x02, 0x00, 0x00,
}
